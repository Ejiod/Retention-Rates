-- Cohorts based on year and product version
WITH cohorts AS (
    SELECT 
        user_id,
        product_version,
        DATE_TRUNC('year', login_date) AS cohort_year,
        MIN(DATE_TRUNC('year', login_date)) OVER (PARTITION BY user_id) AS first_login_year
    FROM 
        users_login_table 
    WHERE 
        CAST(approval_datetime AS date) >= DATE '2021-01-01'
),

-- Count of users by product version, cohort year, and first login year
product_migration AS (
    SELECT 
        product_version,
        cohort_year,
        first_login_year,
        COUNT(DISTINCT user_id) AS number_of_users
    FROM 
        cohorts
    GROUP BY 
        product_version, cohort_year, first_login_year
)

-- Display migration matrix
SELECT 
    first_login_year AS "Migration From",
    cohort_year AS "Migration To",
    product_version AS "Product Version",
    SUM(number_of_users) AS "Number of Users"
FROM 
    product_migration
GROUP BY 
    first_login_year, cohort_year, product_version
ORDER BY 
    first_login_year, cohort_year, product_version;





-----
-- Cohorts based on year, initial product version, and subsequent product versions
WITH cohorts AS (
    SELECT 
        user_id,
        MIN(DATE_TRUNC('year', login_date)) OVER (PARTITION BY user_id) AS first_login_year,
        DATE_TRUNC('year', login_date) AS cohort_year,
        FIRST_VALUE(product_version) OVER (PARTITION BY user_id ORDER BY login_date) AS initial_product,
        product_version AS migrated_product
    FROM 
        users_login_table 
    WHERE 
        CAST(approval_datetime AS date) >= DATE '2021-01-01'
),

-- Count of users by migration from and to product versions
product_migration AS (
    SELECT 
        first_login_year,
        cohort_year,
        initial_product,
        migrated_product,
        COUNT(DISTINCT user_id) AS number_of_users
    FROM 
        cohorts
    GROUP BY 
        first_login_year, cohort_year, initial_product, migrated_product
)

-- Display migration matrix
SELECT 
    first_login_year AS "Year of First Login",
    cohort_year AS "Year of Observation",
    initial_product AS "Migrated From Product",
    migrated_product AS "Migrated To Product",
    number_of_users AS "Number of Users"
FROM 
    product_migration
ORDER BY 
    first_login_year, cohort_year, initial_product, migrated_product;


--Simplified version
-- Step 1: Define cohorts based on the year of the first purchase
WITH cohorts AS (
    SELECT
        user_id,
        DATE_TRUNC('YEAR', MIN(transaction_date)::DATE) AS cohort_year
    FROM 
        transaction
    GROUP BY 
        user_id
),

-- Step 2: Assign each transaction to a cohort
transactions_with_cohort AS (
    SELECT
        t.user_id,
        t.product,
        t.transaction_date,
        DATE_TRUNC('YEAR', t.transaction_date::DATE) AS transaction_year,
        c.cohort_year
    FROM 
        transaction t
    JOIN 
        cohorts c ON t.user_id = c.user_id
),

-- Step 3: Calculate yearly retention rate
retention AS (
    SELECT
        cohort_year,
        transaction_year,
        COUNT(DISTINCT user_id) * 1.0 / (SELECT COUNT(DISTINCT user_id) FROM cohorts WHERE cohort_year = r.cohort_year) AS retention_rate
    FROM 
        transactions_with_cohort r
    GROUP BY 
        cohort_year, transaction_year
    ORDER BY 
        cohort_year, transaction_year
)

SELECT * FROM retention;

